import { UserFragment_address, UserFragment } from "../UserFragment.ts";
interface GqlObject<T extends string = string> {
  __typename: T;
}
export const Address = {
  isAddress: (gqlObject: void | object | GqlObject | null | undefined): gqlObject is UserFragment_address => {
    return !!gqlObject && "__typename" in gqlObject && gqlObject.__typename === "Address" && "id" in gqlObject && typeof gqlObject.id === "string" && "streetNumber" in gqlObject && typeof gqlObject.streetNumber === "number" && "streetName" in gqlObject && typeof gqlObject.streetName === "string";
  }
};
export const isUserFragment = (gqlObject: void | object | GqlObject | null | undefined): gqlObject is UserFragment => {
  return !!gqlObject && "__typename" in gqlObject && gqlObject.__typename === "User" && "id" in gqlObject && typeof gqlObject.id === "string" && "firstname" in gqlObject && typeof gqlObject.firstname === "string" && "lastname" in gqlObject && typeof gqlObject.lastname === "string" && "address" in gqlObject && (typeof gqlObject.address === "object" || gqlObject.address === null);
};